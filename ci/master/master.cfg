# -*- python -*-
# ex: set filetype=python:
# -*- coding: utf-8 -*-


from buildbot.plugins import *
# TODO: Investigar uso de CodebaseParameter
# En algunos casos es necesario tener unos code bases y en otros casos no. Buscar mas informacion acerca de su uso. 
from buildbot.schedulers.forcesched import CodebaseParameter

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Builder"
c['titleURL'] = "http://www.hackathoncastellon.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] ="http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# No usage statistics sent.
c['buildbotNetUsageData'] = None

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",

    # To use a Postgres DB uncoment and modify this line.
    #'db_url' : "postgresql://postgres:mysecretpassword@192.168.1.165/dbname",

}

####### Authentication
#   c['www']['authz'] = util.Authz(
#          allowRules = [
#              util.AnyEndpointMatcher(role="admins")
#          ],
#          roleMatchers = [
#              util.RolesFromUsername(roles=['admins'], usernames=secret.adminUsersNames)
#          ]
#   )
#   c['www']['auth'] = util.UserPasswordAuth(secret.users)


####### CACHE
c['caches'] = {
    'Changes' : 100,
    'Builds' : 5,
    'chdicts' : 100,
    'BuildRequests' : 50,
    'SourceStamps' : 50,
    'ssdicts' : 50,
    'objectids' : 5,
    'usdicts' : 5,
}

####### LOGS

c['logCompressionMethod'] = 'gz'
c['logMaxSize'] = 1024*1024 # 1M
c['logMaxTailSize'] = 32768
c['logEncoding'] = 'utf-8'

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
# c['workers'] = [
#     worker.LocalWorker('local1')
# ]

# Testing Worker
c['workers'] = [worker.Worker("worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []

# c['change_source'].append(changes.GitPoller(
#     'git@github.com:MihaiLupoiu/money-transferring-simulation.git',
#     branches=True,
#     project='money-transferring-simulation',
#     pollinterval=10,
#     pollAtLaunch=True))

c['change_source'].append(changes.GitPoller(
    'git@github.com:MihaiLupoiu/money-transferring-simulation.git',
    branches=True,
    project='tasks',
    pollinterval=10,
    pollAtLaunch=True))
    
####### CODEBASE GENERATOR
## Codebase Generator
all_repositories = {
    # r'git@github.com:MihaiLupoiu/money-transferring-simulation.git': 'money-transferring-simulation',
    r'git@github.com:MihaiLupoiu/money-transferring-simulation.git': 'tasks',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

##

# cbMoneyTransferring = CodebaseParameter('money-transferring-simulation',
#         revision = util.StringParameter(name='revision', default=''),
#         repository = util.FixedParameter(name='repository', default='git@github.com:MihaiLupoiu/money-transferring-simulation.git'),
#         branch = util.StringParameter(name='branch', default='master'),
#         project = util.FixedParameter(name='project', default=''))

# codebasesMoneyTransferring = [cbMoneyTransferring]

cbTasks = CodebaseParameter('tasks',
        revision = util.StringParameter(name='revision', default=''),
        repository = util.FixedParameter(name='repository', default='git@github.com:MihaiLupoiu/money-transferring-simulation.git'),
        branch = util.StringParameter(name='branch', default='master'),
        project = util.FixedParameter(name='project', default=''))

codebasesTasks = [cbTasks]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

# from money_transferring import *

# c['builders'].append(
#     util.BuilderConfig(name="Money Transferring",
#       workernames=["worker"],
#       factory=money_transferring))

from tasks import *

c['builders'].append(
    util.BuilderConfig(name="Tasks",
      workernames=["worker"],
      factory=tasks))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

# c['schedulers'].append(schedulers.AnyBranchScheduler(
#                     name="Money_Transferring_AnyBranchScheduler",
#                     builderNames=["Money Transferring"],
#                     codebases={'money-transferring-simulation': { 'repository': 'git@github.com:MihaiLupoiu/money-transferring-simulation.git'}}))

c['schedulers'].append(schedulers.AnyBranchScheduler(
                    name="Tasks_AnyBranchScheduler",
                    builderNames=["Tasks"],
                    codebases={'tasks': { 'repository': 'git@github.com:MihaiLupoiu/money-transferring-simulation.git'}}))


## Triggers

# c['schedulers'].append(schedulers.ForceScheduler(
#     name='Trigger-Money-Transferring-Build',
#     builderNames=["Money Transferring"],
#     codebases=codebasesMoneyTransferring
# ))

c['schedulers'].append(schedulers.ForceScheduler(
    name='Trigger-Tasks-Build',
    builderNames=["Tasks"],
    codebases=codebasesTasks
))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

# c['services'] = []
